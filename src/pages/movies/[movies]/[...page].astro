---
import PageLayout from '../../../layouts/BaseLayout.astro'
import MovieList from '../../../components/movies/movielist.astro'
import { type Movie, sortMoviesByDate } from '../../../utils/sortMedia.ts';

const moviesResponse = await fetch(new URL('../../../../public/movies.json', import.meta.url));
const moviesData = await moviesResponse.json();

// Parse URL path params
const moviesParam = Astro.params.movies;
const pageParam = Astro.params.page;
let year = 0;

// Extract year from path in format 'year=YYYY'
// Check movies param (e.g. 'year=2024')
if (moviesParam) {
  const match = moviesParam.match(/year=(\d{4})/);
  if (match && match[1]) {
    year = parseInt(match[1], 10);
  }
}

// If not found in movies param, check page param
if (year === 0 && pageParam) {
  const pageStr = Array.isArray(pageParam) ? pageParam[0] : pageParam;
  const match = pageStr.match(/year=(\d{4})/);
  if (match && match[1]) {
    year = parseInt(match[1], 10);
  }
}

let yearMovies: Movie[] = [];
let recommendedMovies: Movie[] = [];

// Use statically imported data
try {
  // Find movies for requested year
  if (year > 0) {
    const yearData = moviesData.years.find((item: { year: number }) => item.year === year);
    if (yearData) {
      yearMovies = sortMoviesByDate(yearData.movies);

      // Get recommended movies for viewed year (recommend === true), limit 10
      recommendedMovies = yearData.movies
        .filter((movie: Movie) => movie.recommend === true)
        .slice(0, 10);
    } else {
      // If not found, show empty
      yearMovies = [];
      recommendedMovies = [];
    }
  }
} catch (error) {
  console.error('Error loading movies data:', error);
}
---

<PageLayout meta={{ title: `${year} Movies List`, description: `Display all movies for ${year}` }} highlightColor='#4AA32E'>
  <main class='flex w-full flex-col items-center py-8'>
    <div id='content' class='animate text-lg flex flex-col items-center gap-y-10 md:w-4/5 lg:w-5/6'>
      {/* Page title */}
      <div class='text-center mb-10'>
        <h1 class='text-4xl font-bold mb-4'>ðŸŽ¬ {year} Movies</h1>
      </div>

      {/* Recommended section - only shows recommended movies for the viewed year */}
      {recommendedMovies.length > 0 && (
        <MovieList movies={recommendedMovies} title="Recommended" />
      )}

      {/* Year movies listing */}
      {yearMovies.length > 0 ? (
        <MovieList movies={yearMovies} title={`${year} Movies`} />
      ) : (
        <div class='text-center py-10'>
          <p class='text-lg text-muted-foreground'>No movie data found for this year</p>
        </div>
      )}

      {/* Previous years links */}
      <section class='mb-12'>
        <div class='text-center'>
          <span class='text-lg font-medium mr-2'>Previous years:</span>
          <a href='/movies/year=2025' class='text-primary hover:text-primary/80 mx-1'>2025</a>
        </div>
      </section>

    </div>
  </main>
</PageLayout>

<script>
  import { initMovieInteractions } from '../../../utils/movieInteraction';
  
  document.addEventListener('DOMContentLoaded', () => {
    initMovieInteractions();
  });
</script>
